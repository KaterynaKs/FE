// 1 уровень сложности: МАТЕМАТИЧЕСКИЕ ОПЕРАТОРЫ JS
// Напишите выражение, которое вычисляет сумму чисел 5 и 10.
// Используя оператор вычитания, найдите разницу между 20 и 7.
// Какой результат даст выражение 8 * 3?
// Что вернёт оператор деления при вычислении 15 / 3?
// Используя оператор остатка от деления, найдите остаток от 17 % 5.
// Увеличьте значение переменной x на 1, используя инкремент.
// Уменьшите значение переменной y на 1, используя декремент.
// Используйте оператор возведения в степень для вычисления 2 ** 4.
// Если z = 10, чему будет равно z += 5?
// Если a = 6, чему будет равно a *= 3?
const sum = 5 + 10;
console.log(sum);
const diff = 20 - 7;
console.log(diff);
const prod = 8 * 3;
console.log(prod);
const div = 15 / 3;
console.log(div);
const rem = 17 % 5;
console.log(rem);

let x = 5; 
x++; 
console.log(x); 

let y = 5; 
y--; 
console.log(y); 

const result = 2 ** 4;
console.log(result); 

let z = 10;
z+=5;
console.log(z);

let a = 6;
a*=3;
console.log(a);


Операторы сравнения JS
5>3 вернёт значение true, так как 5 действительно больше 3.
7 <= 7 вернёт значение true, поскольку 7 меньше или равно 7.
выражение 10 == '10' вернёт значение true, т.к. равенство не строгое.
== не строгое равенство, === строгое равенство (сравнивает так же типы данных).
Выражение 0 === false вернёт значение false, т.к. разные типы данных, число и булиевый тип.
Сравнение 'apple' > 'banana' вернёт значение false, т.к. сравниваются строки по порядку символов(алфавит).
Выражение null == undefined вернёт значение true. В JavaScript оператор == выполняет нестрогое сравнение, и null считается равным undefined при этом типе сравнения.
выражение NaN == NaN вернёт false.
выражение 5 != '5' вернёт false, т.к. неравенство нестрогое и '5' преобразуется в число.
Выражение '5' !== 5 вернёт true, т.к. типы разные.

ПРЕОБРАЗОВАНИЯ В JS ЯВНЫЕ И НЕЯВНЫЕ
let str = String(10);
'5' * 2
Выражение Number('20') вернёт число 20.

let num = Number(true);
Результат будет 1, так как в JavaScript true преобразуется в 1, а false — в 0.
Результатом будет строка '55'.
undefined не может быть интерпретировано как числовое значение. В результате, если вы попытаетесь использовать undefined в числовом контексте, он будет преобразован в NaN.
При выполнении выражения null + 5 значение null неявно преобразуется в число 0. Результат будет 5.

let num = parseInt('123abc');
123

Выражение Boolean(0) вернёт false.
Выражение String(false) вернёт строку 'false'.

ВЗАИМОДЕЙСТВИЕ С ПОЛЬЗОВАТЕЛЕМ: ALERT, PROMPT, CONFIRM
console.log("Привет, мир!");
alert('Привет, мир!');
let userName = prompt('Введите ваше имя:');
let result = confirm('Вы уверены?');

let num1 = prompt('Введите первое число:');
let num2 = prompt('Введите второе число:');
let sum = Number(num1) + Number(num2);
alert('Сумма: ' + sum);

let x = 4;
alert(x);

let userInput = prompt('Введите ваше имя:');
if (userInput === null) {
    alert('Вы нажали "Отмена".');
} else {
    alert('Вы ввели: ' + userInput);
}

alert('Это первая строка.\nЭто вторая строка.\nЭто третья строка.');

let userInput1 = prompt('Введите число:');
let number = Number(userInput1);
let square = number * number;
alert('Квадрат числа ' + number + ' равен ' + square);

let userConfirmed = confirm('Продолжить?');
console.log(userConfirmed);

let userInput = prompt('Введите ваше имя:', 'Имя по умолчанию');
